@page "/empleados"

<!-- Importamos los diferentes programas -->
@using BlazorCrrud.Client.Services
@using BlazorCrud.Share;
@using CurrieTechnologies.Razor.SweetAlert2;

<!-- Injectamos los diferentes servicios -->
@inject SweetAlertService Swal;
@inject IEmpleadoService empleadoService;

<h3>Empleados</h3>

<!-- Boton para crear un nuevo empleado -->
<a class="btn btn-success btn-sm mb-3" href="empleado">Nuevo Empleado</a>

<!-- Tabla donde mostraremos todos los empleados -->
<table class="table">
    <thead>
        <tr>
            <th>Nombre Completo</th>
            <th>Departamento</th>
            <th>Sueldo</th>
            <th>Fecha Contrato</th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        <!-- Preloader mientras cargan los empleados -->
        @if(listaEmpleado == null)
        {
            <tr>
                <td colspan="5" align="center">
                    <img style="width:50px" src="https://mir-s3-cdn-cf.behance.net/project_modules/disp/04de2e31234507.564a1d23645bf.gif" />
                </td>
            </tr>
        }
        else
        {
            <!-- Foreach para recorrer todos los empleados y mostrarlos  -->
            @foreach(var item in listaEmpleado)
            {
                <tr>
                    <td>@item.NombreCompleto</td>
                    <td>@item.Departamento!.Nombre</td>
                    <td>@item.Sueldo</td>
                    <td>@item.FechaContrato.ToString("dd/MM/yyyy")</td>

                    <!-- Botones para actuar con los empleados -->
                    <td>
                        <a class="btn btn-primary btn-sm" href="empleado/@item.IdEmpleado">
                            <i class="fa-solid fa-pen-to-square"></i>
                        </a>
                        <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => Eliminar(item.IdEmpleado))">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>


@code {
    @*1:26:21 video API CRUD*@

    List<EmpleadoDTO>? listaEmpleado = null;

    //Cargamos los empleados  al inicializar la aplicacion
    protected override async Task OnInitializedAsync()
    {
        listaEmpleado = await empleadoService.Lista();
    }

    //Metodo para eliminar un empleado
    private async Task Eliminar(int id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Eliminar Empleado",
            Text = "Deseas eliminar el empleado?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });

        //Si lo eliminamos recargamos la tabla
        if (resultado.IsConfirmed)
        {
            var eliminado = await empleadoService.Eliminar(id);

            if (eliminado)
            {
                listaEmpleado = listaEmpleado!.FindAll(e => e.IdEmpleado != id);
            }
        }

    }

}